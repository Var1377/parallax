// --- Layout Descriptor for Generic GC Object ---

/// Index into the stable TypeDescriptor storage owned by the JIT/backend.
/// Used within LayoutDescriptor variants to refer to nested types, avoiding
/// unstable raw pointers or complex lifetimes across FFI.
pub type DescriptorIndex = usize;

/// Describes the layout of a GC-managed object.
#[derive(Debug, Clone)] // Clone might be useful if descriptors are copied temporarily
pub enum LayoutDescriptor {
    /// A primitive type (like i64, f64, bool) that contains no handles.
    Primitive { size_bytes: usize, align_bytes: usize },
    /// A GC Handle (`Handle<T>`), always pointer-sized and aligned.
    Handle,
    /// A struct layout.
    Struct {
        size_bytes: usize,
        align_bytes: usize,
        /// Maps field index to (byte_offset, field_descriptor_index).
        /// Using Box to keep LayoutDescriptor size somewhat reasonable.
        fields: Box<[(usize, DescriptorIndex)]>,
        /// Direct byte offsets of fields that are Handles (or contain handles recursively).
        /// Populated by LayoutComputer.
        handle_offsets: Box<[usize]>,
    },
    /// An enum layout.
    Enum {
        size_bytes: usize,
        align_bytes: usize,
        /// Byte offset of the discriminant.
        discriminant_offset: usize,
        /// Size of the discriminant in bytes (1, 2, 4, or 8).
        discriminant_size_bytes: usize,
        /// Maps discriminant value to (payload_offset, variant_descriptor_index).
        /// variant_descriptor_index points to the LayoutDescriptor of the variant's payload (often a Struct or Primitive for empty).
        variants: Box<[(u64, usize, DescriptorIndex)]>,
    },
    /// A fixed-size array layout.
    Array {
        size_bytes: usize,
        align_bytes: usize,
        /// Descriptor index for the element type.
        element_descriptor_index: DescriptorIndex,
        /// Number of elements in the array.
        count: usize,
        /// Byte size of a single element (useful for stride calculation).
        element_stride_bytes: usize,
        /// Flag indicating if the element type directly or indirectly contains GC handles.
        element_contains_handles: bool,
    },
    // Potential future additions: Tuple, RawPointer (non-GC), etc.
}

/// Holds the collection of all layout descriptors generated by the compiler.
/// This structure needs to be accessible (likely via pointer) by the GC tracer.
/// It should be owned by the CompiledArtifact or a similar long-lived structure.
// NOTE: This is defined here for clarity, but INSTANTIATED in the backend.
#[derive(Debug, Clone)] // Allow Debug for inspection if needed
pub struct DescriptorStore {
   pub descriptors: Vec<LayoutDescriptor>,
   // Potentially add maps for faster lookup if needed, though index is primary key.
} 